@page "/control"
@inject MqttService Mqtt

<div class="p-8 bg-white min-h-screen">
    <h2 class="text-3xl font-extrabold text-indigo-700 mb-8">Control de LED (MQTT)</h2>

    <div class="flex flex-col items-center space-y-8 p-6 bg-indigo-50 rounded-xl shadow-lg">
        <p class="text-2xl font-semibold text-gray-700" id="led-status">@Status</p>

        <div class="flex items-center space-x-4">
            <span class="text-xl font-medium text-gray-600">OFF</span>
            <label class="custom-switch">
                <input type="checkbox" @onchange="HandleToggle">
                <span class="slider"></span>
            </label>
            <span class="text-xl font-medium text-gray-600">ON</span>
        </div>
    </div>
</div>

@code {
    private string Status = "LED Desconectado. Usa el switch.";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Mqtt.ConnectAsync();
            Mqtt.OnState += (s) =>
            {
                Status = s == "ON" ? "LED: ON (Estado)" : "LED: OFF (Estado)";
                InvokeAsync(StateHasChanged);
            };
            Status = "MQTT conectado. Esperando estado...";
        }
        catch (Exception ex)
        {
            Status = "MQTT no conectado: " + ex.Message;
        }
    }

    private async Task HandleToggle(ChangeEventArgs e)
    {
        bool on = (bool)e.Value;
        Status = on ? "Enviando ON..." : "Enviando OFF...";
        if (!Mqtt.IsConnected) { Status = "MQTT no conectado"; return; }
        await Mqtt.PublishCmdAsync(on ? "ON" : "OFF");
    }
}
